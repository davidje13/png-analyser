import { UniqueStrings } from '../unique_strings.mjs';

const NUMBERS = [
  'zero',
  'one',
  'two',
  'three',
  'four',
  'five',
  'six',
  'seven',
  'eight',
  'nine',
];
const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
const COMPOSITES = [
  'Aacute',
  'Acurcumflex',
  'Adieresis',
  'Agrave',
  'Aring',
  'Atilde',
  'Ccedilla',
  'Eacute',
  'Ecurcumflex',
  'Edieresis',
  'Egrave',
  'Iacute',
  'Icircumflex',
  'Idieresis',
  'Igrave',
  'Ntilde',
  'Oacute',
  'Ocircumflex',
  'Odieresis',
  'Ograve',
  'Otilde',
  'Scaron',
  'Uacute',
  'Ucircumflex',
  'Udieresis',
  'Ugrave',
  'Yacute',
  'Ydieresis',
  'Zcaron',
];

// https://wwwimages2.adobe.com/content/dam/acom/en/devnet/font/pdfs/5176.CFF.pdf Appendix A
const STANDARD_STRINGS = [
  '.notdef',
  'space',
  'exclam',
  'quotedbl',
  'numbersign',
  'dollar',
  'percent',
  'ampersand',
  'quoteright',
  'parenleft',
  'parenright',
  'asterisk',
  'plus',
  'comma',
  'hyphen',
  'period',
  'slash',
  ...NUMBERS,
  'colon',
  'semicolon',
  'less',
  'equal',
  'greater',
  'question',
  'at',
  ...ALPHABET,
  'bracketleft',
  'backslash',
  'bracketright',


  'asciicircum',
  'underscore',
  'quoteleft',
  ...ALPHABET.map((l) => l.toLowerCase()),

  'braceleft',
  'bar',
  'braceright',
  'asciitilde',
  'exclamdown',
  'cent',
  'sterling',
  'fraction',
  'yen',
  'florin',
  'section',
  'currency',
  'quotesingle',
  'quotedblleft',
  'guillemotleft',
  'guilsinglleft',
  'guilsinglright',
  'fi',
  'fl',
  'endash',
  'dagger',
  'daggerdbl',
  'periodcentered',
  'paragraph',
  'bullet',
  'quotesinglbase',
  'quotedblbase',
  'quotedblright',
  'guillemotright',

  'ellipsis',
  'perthousand',
  'questiondown',
  'grave',
  'acute',
  'circumflex',
  'tilde',
  'macron',
  'breve',
  'dotaccent',
  'dieresis',
  'ring',
  'cedilla',
  'hungarumlaut',
  'ogonek',
  'caron',
  'emdash',
  'AE',
  'ordfeminine',
  'Lslash',
  'Oslash',
  'OE',
  'ordmasculine',
  'ae',
  'dotlessi',
  'lslash',
  'oslash',
  'oe',
  'germandbls',


  'onesuperior',
  'logicalnot',
  'mu',
  'trademark',
  'Eth',
  'onehalf',
  'plusminus',
  'Thorn',
  'onequarter',
  'divide',
  'brokenbar',
  'degree',
  'thorn',
  'threequarters',
  'twosuperior',
  'registered',
  'minus',
  'eth',
  'multiply',
  'threesuperior',
  'copyright',
  ...COMPOSITES,
  ...COMPOSITES.map((v) => v.toLowerCase()),
  'exclamsmall',
  'Hungarumlautsmall',
  'dollaroldstyle',
  'dollarsuperior',
  'ampersandsmall',
  'Acutesmall',
  'parenleftsuperior',
  'parenrightsuperior',


  'twodotenleader',
  'onedotenleader',
  ...NUMBERS.map((n) => `${n}oldstyle`),
  'commasuperior',
  'threequartersemdash',
  'periodsuperior',
  'questionsmall',
  'asuperior',
  'bsuperior',
  'centsuperior',
  'dsuperior',
  'esuperior',
  'isuperior',
  'lsuperior',
  'msuperior',
  'nsuperior',
  'osuperior',
  'rsuperior',
  'ssuperior',
  'tsuperior',

  'ff',
  'ffi',
  'ffl',
  'parenleftinferior',
  'parenrightinferior',
  'Circumflexsmall',
  'hyphensuperior',
  'Gravesmall',
  ...ALPHABET.map((l) => `${l}small`),
  'colonmonetary',
  'onefitted',
  'rupiah',
  'Tildesmall',
  'exclamdownsmall',
  'centoldstyle',
  'Lslashsmall',
  'Scaronsmall',
  'Zcaronsmall',
  'Dieresissmall',
  'Brevesmall',
  'Caronsmall',
  'Dotaccentsmall',
  'Macronsmall',
  'figuredash',
  'hypheninferior',
  'Ogoneksmall',
  'Ringsmall',
  'Cedillasmall',
  'questiondownsmall',
  'oneeighth',
  'threeeighths',
  'fiveeighths',
  'seveneighths',


  'onethird',
  'twothirds',
  'zerosuperior',
  ...NUMBERS.slice(4).map((n) => `${n}superior`),
  ...NUMBERS.map((n) => `${n}inferior`),
  'centinferior',
  'dollarinferior',
  'periodinferior',
  'commainferior',
  'Agravesmall',
  'Aacutesmall',
  'Acircumflexsmall',
  'Atildesmall',
  'Adieresissmall',
  'Aringsmall',

  'AEsmall',
  'Ccedillasmall',
  'Egravesmall',
  'Eacutesmall',
  'Ecircumflexsmall',
  'Edieresissmall',
  'Igravesmall',
  'Iacutesmall',
  'Icircumflexsmall',
  'Idieresissmall',
  'Ethsmall',
  'Ntildesmall',
  'Ogravesmall',
  'Oacutesmall',
  'Ocircumflexsmall',
  'Otildesmall',
  'Odieresissmall',
  'OEsmall',
  'Oslashsmall',
  'Ugravesmall',
  'Uacutesmall',
  'Ucircumflexsmall',
  'Udieresissmall',
  'Yacutesmall',
  'Thornsmall',
  'Ydieresissmall',
  '001.000',
  '001.001',
  '001.002',

  '001.003',
  'Black',
  'Bold',
  'Book',
  'Light',
  'Medium',
  'Regular',
  'Roman',
  'Semibold',
];

/** @type {Map<string, number>} */ const STANDARD_LOOKUP = new Map();
for (let i = 0; i < STANDARD_STRINGS.length; ++i) {
  STANDARD_LOOKUP.set(STANDARD_STRINGS[i], i);
}
const CUSTOM_STRING_OFFSET = 391;

if (STANDARD_STRINGS.length !== CUSTOM_STRING_OFFSET) {
  throw new Error('standard strings mismatch');
}

export class CFFStrings extends UniqueStrings {
  constructor() {
    super();
  }

  /**
   * @override
   * @param {string} string
   * @return {number}
   */
  add(string) {
    const standard = STANDARD_LOOKUP.get(string);
    if (standard !== undefined) {
      return standard;
    }
    return super.add(string) + CUSTOM_STRING_OFFSET;
  }
}
